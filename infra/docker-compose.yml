version: "3.9"

services:
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    env_file:
      - ../.env
    environment:
      APP_ENV: ${APP_ENV:-development}
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/app_db}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN:-3600}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN:-1209600}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,PATCH,DELETE,OPTIONS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
      STORAGE_BACKEND: ${STORAGE_BACKEND:-local}
      STORAGE_LOCAL_BASE_PATH: ${STORAGE_LOCAL_BASE_PATH:-/app/uploads}
      STORAGE_LOCAL_BASE_URL: ${STORAGE_LOCAL_BASE_URL:-/uploads}
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION:-us-east-1}
      STORAGE_S3_ENDPOINT_URL: ${STORAGE_S3_ENDPOINT_URL:-http://minio:9000}
      STORAGE_S3_PUBLIC_BASE_URL: ${STORAGE_S3_PUBLIC_BASE_URL:-http://localhost:9000/app-storage}
      STORAGE_S3_USE_PRESIGNED_URLS: ${STORAGE_S3_USE_PRESIGNED_URLS:-true}
      STORAGE_S3_DEFAULT_ACL: ${STORAGE_S3_DEFAULT_ACL:-}
      STORAGE_AWS_ACCESS_KEY_ID: ${STORAGE_AWS_ACCESS_KEY_ID:-minioadmin}
      STORAGE_AWS_SECRET_ACCESS_KEY: ${STORAGE_AWS_SECRET_ACCESS_KEY:-minioadmin}
      STORAGE_AWS_SESSION_TOKEN: ${STORAGE_AWS_SESSION_TOKEN:-}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-localhost}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      COOKIE_SAMESITE: ${COOKIE_SAMESITE:-lax}
      SESSION_COOKIE_NAME: ${SESSION_COOKIE_NAME:-app_session}
      BACKEND_LOG_LEVEL: ${BACKEND_LOG_LEVEL:-info}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ../backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    env_file:
      - ../.env
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT:-3000}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:8000}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    profiles:
      - object-storage
    command: server /data --console-address ":9001"
    env_file:
      - ../.env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  minio-init:
    image: minio/mc:RELEASE.2024-04-18T19-09-19Z
    profiles:
      - object-storage
    depends_on:
      minio:
        condition: service_started
    env_file:
      - ../.env
    entrypoint: >-
      /bin/sh -c "
      set -euo pipefail;
      if [ -z \"${STORAGE_S3_BUCKET:-}\" ]; then
        echo 'No STORAGE_S3_BUCKET specified; skipping MinIO bucket creation.';
        exit 0;
      fi;
      until mc alias set local http://minio:9000 \"${MINIO_ROOT_USER:-minioadmin}\" \"${MINIO_ROOT_PASSWORD:-minioadmin}\"; do
        echo 'Waiting for MinIO API...';
        sleep 2;
      done;
      until mc ls local >/dev/null 2>&1; do
        echo 'Waiting for MinIO to respond to client commands...';
        sleep 2;
      done;
      mc mb --ignore-existing local/${STORAGE_S3_BUCKET};
      mc anonymous set download local/${STORAGE_S3_BUCKET};
      "
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  backend_uploads:
  frontend_node_modules:
  postgres_data:
  redis_data:
  minio_data:
